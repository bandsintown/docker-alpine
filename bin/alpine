#!/usr/bin/env bash
set +x
set -e

image_name="bandsintown/$(basename $0)"
docker_compose_tests=(test-image-base test-image-dns test-image-dns-multiple test-image-consul-template)

help() {
    cat <<- EOHELP
Usage: $(basename $0) COMMAND OPTIONS
Example: $(basename $0) tests --version 3.19.1 --build

A thin wrapper around docker compose to manage the '$image_name' image

COMMANDS:

help        This help message.
tests       Run tests for the selected version image.
build       Build an image for the selected version.

OPTIONS:

--version   Required. The version of the image to build or test.
--build     Build the image before running the tests. Used with the 'tests' command.
--variant   The variant of the image to build or test. Used with the 'build' command.
EOHELP
}

function parse_opts() {
    until [ "$1" = "" ] ; do
        local option="${1}"

        case $option in
            --build)
                run_build="true"
                ;;
            --version)
                versionFull="${2}"
                [[ $versionFull =~ ^[0-9]+\.[0-9]+(\.[0-9]+)* ]] || { error "Invalid version format"; exit 1; }
                ;;
            --variant)
                variant="${2}"
                [[ $variant == "test" ]] || { error "Invalid variant. Valid variants: test"; exit 1; }
                ;;
        esac

        shift
    done
}

function run_build() {
    # Build image
    test -n "${versionFull}" || { echo "Specify the version you want to build"; exit 1; }
    echo "==> Building image for ${tagged_image_name} ..."
    export VERSION=${versionFull}
    run_command="docker compose build alpine"

    ${run_command}

    # Build Test image
    if [[ -n ${variant} ]]; then
        echo "==> Building image ${tagged_image_name}-test..."
        run_command="docker compose build alpine-test"
        ${run_command}
    fi
}

function run_tests() {
    test -n "${versionFull}" || { echo "Specify the version you want to test"; exit 1; }
    test -n "${run_build}" && variant="test" && run_build

    echo "==> Running tests for ${tagged_image_name} ..."

    for dc_test in "${docker_compose_tests[@]}"; do
        echo "==> Running test ${dc_test} for ${versionFull} ..."
        run_command="docker compose run -e VERSION=${versionFull} --rm ${dc_test}"
        ${run_command}
    done
}

trap cleanup_containers EXIT

function cleanup_containers() {
    docker compose down
    exit
}


command="$1"

echo "Command: $command"

# Parse options
parse_opts "$@"


tagged_image_name="${image_name}:${versionFull}"

# Run the command
case "${command}" in
    help|-h|--help)
        help
        ;;
    build)
        shift
        run_build "$@"
        ;;
    tests)
        shift
        run_tests "$@"
        ;;
    *)
        echo "Invalid command"
        help
        ;;
esac
